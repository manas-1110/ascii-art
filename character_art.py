# -*- coding: utf-8 -*-
"""character_art.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1eWANIiD3ZDzeIN0NamhvPxMl_2zXsBb9
"""

import PIL


ASCII_CHARS = '''   .'`^",:;Il!i><~+_-?][}{1)(\/tfjrxnuvczXYUJCLQ0OZmwqpdbkhao*#MW&8%B@$'''
# ASCII_CHARS = '''$@B%8&WM#*oahkbdpqwmZO0QLCJUYXzcvunxrjft/\()1{}[]?-_+~<>i!lI;:,"^`'.   '''

# resize image according to a new width
def resize_image(image, new_width=100):
    width, height = image.size
    ratio = height/width
    new_height = int(new_width * ratio)
    resized_image = image.resize((new_width, new_height))
    return(resized_image)

# convert each pixel to grayscale
def grayify(image):
    grayscale_image = image.convert("L")
    return(grayscale_image)

# convert pixels to a string of ascii characters
def pixels_to_ascii(image):
    pixels = image.getdata()

    # Normalize the number to be within the range of ASCII_CHARS indices
    normalized_pixels = [pixel/255 for pixel in pixels]
    characters = "".join([ASCII_CHARS[int(pixel * (len(ASCII_CHARS)-1))] for pixel in normalized_pixels])
    return characters


def main(new_width=100):
    # To open image from user-input

    image = PIL.Image.open('tree.jpg')

    # convert image to ascii
    new_image_data = pixels_to_ascii(grayify(resize_image(image)))

    # formatting the text
    pixel_count = len(new_image_data)
    ascii_image = "\n".join([new_image_data[index:(index+new_width)] for index in range(0, pixel_count, new_width)])

    # print result
    print(ascii_image)

    with open("ascii_image.txt", "w") as f:
        f.write(ascii_image)

# run program
main()

